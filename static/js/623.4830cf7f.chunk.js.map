{"version":3,"file":"static/js/623.4830cf7f.chunk.js","mappings":"wLAI2B,SAASA,EAAEA,EAAEC,GAAG,IAAIC,EAAED,EAAEE,aAAaD,EAAE,iBAAiBA,GAAG,SAASA,GAAG,SAASA,GAAG,WAAWA,GAAG,wBAAwBA,GAAG,SAASA,IAAIA,EAAE,QAAQA,EAAE,OAAOD,EAAEE,aAAaD,EAAE,MAAME,EAAEH,EAAEI,OAAO,cAAcJ,EAAEI,OAAOC,WAAWC,oBAAoB,UAAU,CAACC,IAAIR,EAAES,QAAQR,GAAG,CAACI,OAAOD,IAAIM,MAAMC,UAAU,IAAIC,EAAEC,EAAEC,EAAEC,EAAEC,EAAE,GAAGC,EAAEC,KAAK,GAAGD,EAAEC,gBAAgBC,aAAa,KAAK,SAASjB,GAAG,SAASA,GAAG,SAASA,IAAIU,EAAE,IAAIQ,KAAK,CAACH,EAAEC,OAAO,SAAShB,GAAG,SAASA,IAAIa,QAAQH,EAAES,OAAO,SAASnB,KAAK,CAAC,IAAIW,EAAES,KAAKC,MAAMR,GAAG,KAAK,CAAC,MAAMS,GAAG,MAAMtB,GAACuB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKD,GAAC,IAAChB,IAAIR,EAAE0B,eAAezB,IAAG,MAAM,IAAI0B,EAAAA,EAAE,iBAAiBH,EAAEI,QAAQ1B,EAAE,CAAC,GAAGW,EAAEgB,MAAM,CAAC,MAAM3B,GAACuB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKZ,EAAEgB,OAAK,IAACrB,IAAIR,EAAE0B,eAAezB,IAAG,MAAM,IAAI0B,EAAAA,EAAE,iBAAiBd,EAAEgB,MAAMD,QAAQ1B,EAAE,CAAC,MAAM,WAAWA,IAAIe,EAAEC,KAAKb,OAAOD,EAAEU,QAAQgB,MAAMb,EAAEC,KAAKV,IAAIS,EAAEC,MAAMD,EAAEc,WAAWjB,EAAEkB,QAAQ,OAAO9B,GAAG,IAAI,OAAOc,EAAEJ,EAAE,MAAM,IAAI,OAAOI,EAAEH,EAAE,MAAM,IAAI,SAASG,EAAEF,EAAE,MAAM,IAAI,OAAOE,EAAED,EAAE,MAAM,QAAQC,EAAEC,EAAEC,KAAK,MAAM,CAACA,KAAKF,EAAEe,WAAWd,EAAEc,WAAWL,eAAezB,EAAEgC,IAAIhB,EAAEgB,IAAIzB,IAAIR,EAAE,GAAG,C","sources":["../node_modules/@arcgis/core/core/workers/request.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.29/esri/copyright.txt for details.\n*/\nimport t from\"../Error.js\";function e(e,s){let a=s.responseType;a?\"array-buffer\"!==a&&\"blob\"!==a&&\"json\"!==a&&\"native\"!==a&&\"native-request-init\"!==a&&\"text\"!==a&&(a=\"text\"):a=\"json\",s.responseType=a;const r=s.signal;return delete s.signal,globalThis.invokeStaticMessage(\"request\",{url:e,options:s},{signal:r}).then((async n=>{let o,i,l,u,c;if(n.data)if(n.data instanceof ArrayBuffer){if(!(\"json\"!==a&&\"text\"!==a&&\"blob\"!==a||(o=new Blob([n.data]),\"json\"!==a&&\"text\"!==a||(u=await o.text(),\"json\"!==a)))){try{i=JSON.parse(u||null)}catch(p){const a={...p,url:e,requestOptions:s};throw new t(\"request:server\",p.message,a)}if(i.error){const a={...i.error,url:e,requestOptions:s};throw new t(\"request:server\",i.error.message,a)}}}else\"native\"===a&&(n.data.signal=r,l=await fetch(n.data.url,n.data),n.httpStatus=l.status);switch(a){case\"blob\":c=o;break;case\"json\":c=i;break;case\"native\":c=l;break;case\"text\":c=u;break;default:c=n.data}return{data:c,httpStatus:n.httpStatus,requestOptions:s,ssl:n.ssl,url:e}}))}export{e as execute};\n"],"names":["e","s","a","responseType","r","signal","globalThis","invokeStaticMessage","url","options","then","async","o","i","l","u","c","n","data","ArrayBuffer","Blob","text","JSON","parse","p","_objectSpread","requestOptions","t","message","error","fetch","httpStatus","status","ssl"],"sourceRoot":""}