"use strict";(self.webpackChunkwanlok_component_react=self.webpackChunkwanlok_component_react||[]).push([[2551],{52551:(e,t,o)=>{o.r(t),o.d(t,{default:()=>j});var r=o(89379),i=o(35143),l=o(86560),s=o(3825),n=(o(95444),o(77717)),a=o(50346),y=o(90534),p=o(46053),u=(o(81806),o(76460),o(47249),o(28379)),d=o(85842),c=o(76797),h=o(80963),v=o(25515),S=o(65624),m=o(11270),f=o(94729),g=o(21617),_=o(5682),M=o(55053),b=o(25900),C=o(7246),A=o(27410),Z=o(76940),k=o(86875);const w=["atom","xml"],G={base:b.A,key:"type",typeMap:{"simple-line":C.A},errorContext:"symbol"},P={base:b.A,key:"type",typeMap:{"picture-marker":A.A,"simple-marker":Z.A},errorContext:"symbol"},x={base:b.A,key:"type",typeMap:{"simple-fill":k.A},errorContext:"symbol"};let R=class extends((0,S.d)((0,g.J)((0,m.q)((0,f.A)((0,_.j)((0,n.P)(v.A))))))){constructor(){super(...arguments),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?(0,r.A)({url:e},t):e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{var t;const o=e.layerDefinition.drawingInfo.renderer.symbol;o&&"esriSFS"===o.type&&(null===(t=o.outline)||void 0===t?void 0:t.style.includes("esriSFS"))&&(o.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?(0,y.e7)(this.url,w)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(a.QP).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){var t;const o=this.spatialReference,{data:r}=await(0,s.A)(l.A.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:(0,h.oT)(o)?void 0:null!==(t=o.wkid)&&void 0!==t?t:JSON.stringify(o)},signal:e});return r}_hasGeometry(e){var t,o;return null!==(t=null===(o=this.featureCollections)||void 0===o?void 0:o.some((t=>{var o,r;return(null===(o=t.featureSet)||void 0===o?void 0:o.geometryType)===e&&(null===(r=t.featureSet.features)||void 0===r?void 0:r.length)>0})))&&void 0!==t&&t}};(0,i._)([(0,p.MZ)()],R.prototype,"description",void 0),(0,i._)([(0,p.MZ)()],R.prototype,"featureCollections",void 0),(0,i._)([(0,u.w)("service","featureCollections",["featureCollection.layers"])],R.prototype,"readFeatureCollections",null),(0,i._)([(0,p.MZ)({type:c.A,json:{name:"lookAtExtent"}})],R.prototype,"fullExtent",void 0),(0,i._)([(0,p.MZ)(M.id)],R.prototype,"id",void 0),(0,i._)([(0,p.MZ)(M.fV)],R.prototype,"legendEnabled",void 0),(0,i._)([(0,p.MZ)({types:G,json:{write:!0}})],R.prototype,"lineSymbol",void 0),(0,i._)([(0,p.MZ)({type:["show","hide"]})],R.prototype,"listMode",void 0),(0,i._)([(0,p.MZ)({types:P,json:{write:!0}})],R.prototype,"pointSymbol",void 0),(0,i._)([(0,p.MZ)({types:x,json:{write:!0}})],R.prototype,"polygonSymbol",void 0),(0,i._)([(0,p.MZ)({type:["GeoRSS"]})],R.prototype,"operationalLayerType",void 0),(0,i._)([(0,p.MZ)(M.OZ)],R.prototype,"url",void 0),(0,i._)([(0,p.MZ)({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],R.prototype,"title",null),(0,i._)([(0,p.MZ)({readOnly:!0,json:{read:!1},value:"geo-rss"})],R.prototype,"type",void 0),R=(0,i._)([(0,d.$)("esri.layers.GeoRSSLayer")],R);const j=R}}]);
//# sourceMappingURL=2551.5d6660a0.chunk.js.map