{"version":3,"file":"static/js/4504.9586aaa4.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/core/layers/support/RasterWorker.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.29/esri/copyright.txt for details.\n*/\nimport\"../../geometry.js\";import r from\"../../geometry/support/GeographicTransformation.js\";import e from\"./PixelBlock.js\";import{decode as t}from\"./rasterFormats/RasterCodec.js\";import{split as s,clipTile as o,mosaic as i,approximateTransform as n,getLocalArithmeticNorthRotations as a}from\"./rasterFunctions/pixelUtils.js\";import{create as l}from\"./rasterFunctions/rasterFunctionHelper.js\";import{requirePE as m,load as c,getProjectionOffsetGrid as f}from\"./rasterFunctions/rasterProjectionHelper.js\";import{computeStatisticsHistograms as p,estimateStatisticsHistograms as u}from\"./rasterFunctions/stretchUtils.js\";import{convertVectorFieldData as S,convertToLocalDirections as d}from\"./rasterFunctions/vectorFieldUtils.js\";import{readTransform as x}from\"./rasterTransforms/utils.js\";import y from\"../../renderers/support/RasterSymbolizer.js\";import{createFlowMesh as O}from\"../../views/2d/engine/flow/dataUtils.js\";import h from\"../../geometry/Extent.js\";import N from\"../../geometry/Point.js\";class J{convertVectorFieldData(r){const t=e.fromJSON(r.pixelBlock),s=S(t,r.type);return Promise.resolve(null!=s?s.toJSON():null)}computeStatisticsHistograms(r){const t=e.fromJSON(r.pixelBlock),s=p(t);return Promise.resolve(s)}async decode(r){const e=await t(r.data,r.options);return e&&e.toJSON()}symbolize(r){r.pixelBlock=e.fromJSON(r.pixelBlock),r.extent=r.extent?h.fromJSON(r.extent):null;const t=this.symbolizer.symbolize(r);return Promise.resolve(null!=t?t.toJSON():null)}async updateSymbolizer(r){this.symbolizer=y.fromJSON(r.symbolizerJSON),r.histograms&&\"rasterStretch\"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=r.histograms)}async updateRasterFunction(r){this.rasterFunction=l(r.rasterFunctionJSON)}async process(r){const t=this.rasterFunction.process({extent:h.fromJSON(r.extent),primaryPixelBlocks:r.primaryPixelBlocks.map((r=>null!=r?e.fromJSON(r):null)),primaryPixelSizes:r.primaryPixelSizes?.map((r=>null!=r?N.fromJSON(r):null)),primaryRasterIds:r.primaryRasterIds});return null!=t?t.toJSON():null}stretch(r){const t=this.symbolizer.simpleStretch(e.fromJSON(r.srcPixelBlock),r.stretchParams);return Promise.resolve(t?.toJSON())}estimateStatisticsHistograms(r){const t=u(e.fromJSON(r.srcPixelBlock));return Promise.resolve(t)}split(r){const t=s(e.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel??0,!1===r.useBilinear);return t&&t.forEach(((r,e)=>{t.set(e,r?.toJSON())})),Promise.resolve(t)}clipTile(r){const t=e.fromJSON(r.pixelBlock),s=o({...r,pixelBlock:t});return Promise.resolve(s?.toJSON())}async mosaicAndTransform(r){const t=r.srcPixelBlocks.map((r=>r?new e(r):null)),s=i(t,r.srcMosaicSize,{blockWidths:r.blockWidths,alignmentInfo:r.alignmentInfo,clipOffset:r.clipOffset,clipSize:r.clipSize});let o,l=s;return r.coefs&&(l=n(s,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation)),r.projectDirections&&r.gcsGrid&&(o=a(r.destDimension,r.gcsGrid),l=d(l,r.isUV?\"vector-uv\":\"vector-magdir\",o)),{pixelBlock:l?.toJSON(),localNorthDirections:o}}async createFlowMesh(r,e){const t={data:new Float32Array(r.flowData.buffer),mask:new Uint8Array(r.flowData.maskBuffer),width:r.flowData.width,height:r.flowData.height},{vertexData:s,indexData:o}=await O(r.meshType,r.simulationSettings,t,e.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const t=h.fromJSON(e.projectedExtent),s=h.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationSteps&&(o=new r({steps:e.datumTransformationSteps})),(e.includeGCSGrid||m(t.spatialReference,s.spatialReference,o))&&await c();const i=e.rasterTransform?x(e.rasterTransform):null;return f({...e,projectedExtent:t,srcBufferExtent:s,datumTransformation:o,rasterTransform:i})}}export{J as default};\n"],"names":["J","convertVectorFieldData","r","t","e","fromJSON","pixelBlock","s","S","type","Promise","resolve","toJSON","computeStatisticsHistograms","p","decode","data","options","symbolize","extent","h","this","symbolizer","updateSymbolizer","_this$symbolizer","y","symbolizerJSON","histograms","rendererJSON","updateRasterFunction","rasterFunction","l","rasterFunctionJSON","process","_r$primaryPixelSizes","primaryPixelBlocks","map","primaryPixelSizes","N","primaryRasterIds","stretch","simpleStretch","srcPixelBlock","stretchParams","estimateStatisticsHistograms","u","split","_r$maximumPyramidLeve","tileSize","maximumPyramidLevel","useBilinear","forEach","set","clipTile","o","_objectSpread","mosaicAndTransform","_l","srcPixelBlocks","i","srcMosaicSize","blockWidths","alignmentInfo","clipOffset","clipSize","coefs","n","destDimension","sampleSpacing","interpolation","projectDirections","gcsGrid","a","d","isUV","localNorthDirections","createFlowMesh","Float32Array","flowData","buffer","mask","Uint8Array","maskBuffer","width","height","vertexData","indexData","O","meshType","simulationSettings","signal","result","vertexBuffer","indexBuffer","transferList","getProjectionOffsetGrid","projectedExtent","srcBufferExtent","datumTransformationSteps","steps","includeGCSGrid","m","spatialReference","c","rasterTransform","x","f","datumTransformation"],"sourceRoot":""}